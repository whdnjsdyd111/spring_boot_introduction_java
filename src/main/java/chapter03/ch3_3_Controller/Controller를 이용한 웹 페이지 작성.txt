        Controller 클래스에 대해

RestController 클래스는 REST 서비스를 간단히 작성할 수 있게 도와준다.
하지만 실제 웹 애플리케이션 REST 서비스보다 HTML로 구성된 웹 페이지의 사용 빈도가 압도적으로 높다.
이런 일반 웹 페이지를 만들 때는 RestController 가 그다지 도움이 되지 못한다. 이때 사용할 수 있는 것이
Controller 라는 클래스다. 이것도 앞서 그루비 애플리케이션을 만들었을 때 사용했다.
Controller 클래스를 사용할 때는 RestController와 다른 점이 몇가지 있다.

    @Controller 를 클래스에 붙인다.

일반 웹 페이지를 사용하는 경우는 컨트롤러 클래스 앞에 @Controller 어노테이션을 붙인다.
이것도 그루비 앱에서 사용했었다.

    페이지의 템플릿 준비하기

Controller 클래스의 경우 RestController 처럼 '필요한 정보만 출력하면 ok!' 하고 끝나서는 안된다.
일반적으로는 표시할 페이지를 미리 템플릿으로 준비해두고 이것을 불러와서 구체적인 내용을 작성하게 된다.

    템플릿용 라이브러리 준비

템플릿을 사용하기 때문에 이를 위한 라이브러리도 필요하다. 앞서 그루비 앱을 만들었을 때는 타임리프라는 템플릿 엔진을
이용했지만 자바 기반으로 개발할 때는 템플릿 엔진을 위한 라이브러리도 수동으로 추가해야 한다.
이 사항들을 유의하면서 프로젝트를 변경한다.

        타임리프 추가

제일 먼저 할 것은 '템플릿 엔진을 사용하기 위한 라이브러리 추가' 작업이다.
여기서도 그루비 앱에서 사용한 타임리프 템플릿 엔진을 사용하겠다. 이를 위해서는 pom.xml 파일에 라이브러리 정보를
추가할 필요가 있다.

    pom.xml 수정

메이븐 명령으로 프로젝트를 작성했다면 편집기 등으로 pom.xml 파일을 열어서 편집하면 된다.
Dependencies 에 thymeleaf 를 추가한다.


    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-thymeleaf</artifactId>
    </dependency>


이것이 타임리프를 사용하기 위한 태그다.

        컨트롤러 수정

이제 컨트롤러 클래스를 수정해보자. HeloController3.java를 다음과 같이 수정한다.

    HeloController3.java

보면 알수 있듯 단순한 컨트롤러 클래스다. @Controller 어노테이션을 붙인 클래스와 @RequestMapping("/")을 붙인
index 메소드가 하나 존재한다. 여기선 "index" 라는 String을 반환하는 것이 전부다.

        템플릿 파일 만들기

표시할 웹 페이지의 템플릿을 만들어보자. 템플릿 파일은 resources 폴더 내에 templates 폴더를 만들고 그 안에 보관하겠다.
이것도 그루비 앱과 같은 방식이다. 메이븐 명령으로 작성하면 main 폴더 내에 resources 폴더를 만들고
그 안에 templates 폴더를 생성한다. 여기에 index.html 파일을 만들어 두면 된다.

    index.html

localhost:8080 으로 접속해보자. index.html 파일 내용이 표시된다.
HeloController3 의 리퀘스트 핸들러는 단순히 return "index"; 를 실행하고 있지만 Controller 클래스의 리퀘스트 핸들러에선
템플릿 이름을 반환하므로 해당 템플릿을 검색하고 그것을 읽어서 렌더링한다.
단, Controller 클래스가 이 모든 것을 해주는 것은 아니다. pom.xml 에서 타임리프를 설정했기 때문에 가능한 것이다.
pom.xml에서 디펜던시스 태그를 지우면 단순히 'index' 라는 텍스트만 출력된다.
템플릿 엔진을 위한 스프링 부트의 라이브러리를 적용하므로 '지정한 이름의 템플릿이 자동으로 적용' 되게 되는 것이다.

        템플릿에 값 표시하기

앞 장의 그루비 앱에서 본 것처럼 컨트롤러에서 템플릿에 값을 전달해보자.
먼저 템플릿 측 코드를 수정하겠다.

    index.html

여기선 수정이 필요한 <body> 부분만 보여주고 있지만 나머지 <head> 부분은 앞의 것을 그대로 사용하면 된다.
컨트롤러 측 코드도 수정해보자.

    HeloController4.java

앞 절에서 한 것처럼 숫자를 URL 경로를 이용해서 컨틀롤러에 숫자의 합을 구하게 하고 있다.

    템플릿에 값 출력

그러면 변경된 코드를 보자. 먼저 템플릿 부분으로 다음과 같은 형식으로 값을 출력하고 있다.


    <p class="mgs" th:text="{msg}"></p>


th:text라는 속성에 ${변수명} 형식으로 변수를 심으면 값을 전달할 수 있었다.
여기선 ${msg}라고 설정해서 변수 msg의 값을 표시하고 있다.

        Model 클래스 사용하기

메소드의 인수에 처음보는 코드가 등장하고 있다.


    @RequestMapping("/{num}")
    public String index(@PathVariable int num, Model model) { ...


@RequestMapping 어노테이션과 @PathVariable 은 모두 앞 절에서 본 것들이다. 어노테이션 인수에 "/{num}" 이라고 지정하고
이 num 의 값이 @PathVariable 의 변수에 num에 전달하는 것이다. 이 후 Model 클래스의 인스턴스가 인수로 설정돼 있다.
Model 은 웹 페이지에서 사용할 데이터를 관리하는 클래스다. Model 에 템플릿에서 사용할 값을 지정하므로
데이터를 전달할 수 있다. 예제 코드에선,


    model.addAttribute("msg", "total: " + res);


이와 같이 addAttribute 라는 메소드로 값을 설정한다. 첫 번째 인수에는 값의 이름을, 두 번째 인수에는 지정할 값을 지정한다.
예를 들어 예제에선 "total: " + res 라는 값을 msg 라는 이름으로 저장하고 있다.
템플릿 측에선 ${msg} 형태로 변수 msg 의 값을 가져올 수 있다.

        ModelAndView 클래스 사용

그루비 앱에선 ModelAndView 라는 클래스로 변경했는데 Model 이랑은 어떻게 다를까?
사실 다른 점이 없다. ModelAndView 와 Model 은 모두 리퀘스트 핸들러로 사용할 수 있다.
단 사용 방법에 있어서 다음과 같은 약간의 차이가 있다.

    Model

템플릿에서 사용할 데이터들을 일괄해서 관리한다. 데이터 관리가 전부로 뷰 관련 정보(사용할 템플릿의 이름 등)는
가지고 있지 않다. 따라서 Model을 반환값으로 사용할 수는 없다(템플릿 정보가 없기 때문이다).

    ModelAndView

템플릿에서 사용할 데이터들과 뷰 관련 정보(템플릿 이름 등)를 일괄해서 관리한다. 뷰 관련 정보를 가지고 있어서
ModelAndView 를 그대로 반환값으로 사용할 수 있으며 이를 통해서 설정한 템플릿도 사용할 수 있게 된다.
양쪽 모두 인수로 사용되지만 Model 은 반환 값으로 사용할 수 있으며 이를 통해 설정한 템플릿도 사용할 수 있게 된다.
양쪽 모두 인수로 사용되지만 Model 은 반환 값으로 사용되지 않고 ModelAndView는 반환값으로 사용된다.
'뷰 관련 정보의 유무'에 따라 차이가 발생하는 것이다.

    ModelAndView 로 변경하기

앞의 Model 을 사용한 예제를 ModelAndView 로 변경해보자.

    HeloController5.java

index 의 인수와 반환값으로 ModelAndView 가 사용되고 있다. 메소드에선 다음과 같이 값을 보관하고 템플릿을 설정하고 있다.


    mav.addObject("msg", "total: " + res);
    mav.setViewName("index");


값 보관 방법은 기본적으로 Model 과 같지만 메소드명이 addObject 인 것이 다르다. 또한, 사용할 뷰의 이름을 setViewName 으로
설정하고 있는 것도 차이다. setViewName 없이 단순히 return 만 하게 되면 템플릿을 찾지 못하고 오류가 발생하니 주의하자.

        폼 사용하기

좀 더 본격적으로 데이터 교환 처리를 하려면 폼을 이용하는 것이 좋다. 먼저 템플릿을 다음과 같이 수정하자.

    index2.html

여기선 <form method="post" action="/" > 형태로 폼을 설정하고 있다. 전송 대상은 "/" 이고 POST 방식을 사용하고 있다.
<input type="text"> 태그에선 th:value="${value}" 와 같이 $value 값을 입력 필드에 표시하고 있다.

    컨트롤러 수정하기

컨트롤러 측도 수정해보자.

    HeloController6.java

    @RequestMapping 수정

먼저 @RequestMapping 어노테이션 부분을 보자.


    @RequestMapping(value="/", method=RequestMethod.GET)


이미 그루비에서 봤듯 @RequestMapping 의 인수는 value="/" 형식으로 작성해야 한다.
하지만 인수에 value 만 있는 경우는 value를 생략하고 값만 지정할 수도 있다. 이번처럼 인수가 여러 개 있는 경우는 귀찮아도
인수명을 모두 지정해주어야 한다. 여기선 value="/"에 매핑되는 메소드가 두 개 있다. 하나는 GET 접속 시 사용하는 것이고
다른 하나는 POST 전송 시 사용되는 것이다. 양쪽 모두 주소가 같기 때문에 메소드를 지정해서 '이것은 GET용, 이것은 POST용'
하고 명확히 구별해줄 필요가 있다.

    @RequestParam 를 이용한 폼 받기

폼이 전송한 값은 send 메소드로 받아서 처리하고 있으며 다음과 같이 인수를 이용해서 값을 가져오고 있다.


    @RequestParam("text1") String str


@RequestParam 이 폼이 전송한 값을 지정하기 위한 어노테이션이다. 이를 통해 폼에 있는 name="text1" 이라는
컨트롤러의 값이 인수 str에 전달되는 것이다.

        기타 폼 컨트롤러

    폼의 템플릿 준비

기타 컨트롤러들을 사용해보자. 먼저 템플릿을 수정한다.

    index3.html

    컨트롤러 클래스 수정

여기선 <checkbox>와 두 개의 <radio> 그리고 단일 항목 및 복수 항목 선택이 가능한 두 개의 <select>를 사용하고 있다.
이 항목들이 전송한 값을 처리할 수 있게 컨트롤러 코드를 수정해보자.

    HeloController7.java

    폼 값 받기

폼이 전송한 값은 send 메소드로 받는다. 이 메소드에서 폼이 보낸 값을 받을 수 있게 @RequestParam이 4개 설정돼 있다.
하지만 잘 보면 작성법이 조금 다르다.


    @RequestParam(value="check1", required=false) boolean check1


인수에는 'value' 와 'required' 라는 두 개의 값이 있다. value는 받을 매개변수의 이름이다. required 는 이 값이
필수 항목인지(즉, 반드시 전달되는 값인지 아닌지 전달되지 않는 경우도 있는지)를 결정한다.
보통 @RequestParam 를 지정한 매개변수는 반드시 인수로 전달돼야 한다. 값이 존재하지 않으면 내부 오류가 발생한다.
하지만 이 required=false 를 지정하면 해당 매개변수가 없어도 오류가 발생하지 않고 처리가 계속 진행된다.
체크박스, 라디오 버튼, 선택 리스트는 아무것도 선택되지 않은 경우 값이 전달되지 않는다. 이 때문에
required=false 를 지정하지 않으면 항상 오류가 발생하지만, 오류 없이 미선택인 경우에도 처리를 지속할 수 있다.
참고로 값이 전달되지 않은 경우는 null 값으로 처리된다. 따라서 받은 값의 처리는 'null' 인 경우도 있다는 것을 고려해서
작성해야 한다.

        리다이렉트에 대해

기본적인 컨트롤러 사용법을 살펴보았다. 마지막으로 '페이지 이동' 을 설명한다.
특정 주소에 접속했을 때 필요에 따라 다른 주소로 이동시키고 싶은 경우도 있다. 이럴 때 사용하는 것이
포워드와 리다이렉트다.
포워드는 서버 내부에서 다른 페이지를 읽어 표시하는 것이다. 접속한 주소는 그대로이고 표시 내용만
다른 페이지로 바뀌는 것이다.
리다이렉트는 클라이언트 측에 전송한 후에 다른 페이지로 이동시키는 것이다. 따라서 접속하는 주소와
이동 위치 모두 변경된다.
실제 예제를 보자. 다음과 같이 수정해보자.

    index4.html

다음은 컨트롤러다. "/" 와 리다이렉트용, 포워드용 주소로 호출할 리퀘스트 핸들러를 작성한다.

    HeloController8.java

    리다이렉트와 포워드

리다이렉트와 포워드 처리는 사실은 매우 간단하다. 보면 알겠지만 return 하는 String 값을
"redirect:oo" 또는 "forward:oo" 이라고 지정하면 된다.(oo는 새로운 주소). 단, 한 줄의 코드만 바꿔주면 다른 주소로
이동시킬 수 있다.

    ModelAndView인 경우

리퀘스트 핸들러의 반환값이 String 이면 이 방법은 문제없다. 하지만 ModelAndView 를 반환값으로 설정한 경우는 어떨까?
이때도 ModelAndView 인스턴스를 작성해서 반환하면 된다.


    return new ModelAndView("redirect:/");


예를 들어 이런식으로 ModelAndView 인스턴스를 작성하고 인수에 "redirect:oo" 처럼 리다이렉트 위치를 지정하면 해당
주소로 리다이렉트한다. 포워드도 같은 방식으로 하면 된다.