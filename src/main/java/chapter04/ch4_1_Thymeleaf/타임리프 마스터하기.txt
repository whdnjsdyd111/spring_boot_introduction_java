        다양한 템플릿

컨트롤러의 기본적인 사용법을 알았으니 다음은 MVC의 V인 뷰를 살펴보자.
스프링 부트에선 화면 출력에 템플릿을 사용하며 다음과 같은 템플릿을 이용할 수 있다.

    타임리프(Thymeleaf)

앞 장에서 사용한 템플릿 엔진이다. th:oo 형식으로 속성을 HTML 태그에 추가해서 값이나 처리 등을 페이지에 심을 수 있다.
자체 태그를 사용하지 않으므로 HTML 비주얼 편집기와도 궁합이 좋으며 편집이 쉽다는 장점이 있다.

    JSP(JavaServer Pages)

'잘 모르는 템플릿은 사용하는 것보다 JSP를 사용하는 것이 좋지 않나?' 라는 생각하는 독자가 많을 수 있다.
스프링 부트에서도 JSP를 사용할 수 있지만 여러 가지 문제가 있다. 스프링 부트에선 애플리케이션을 자바 서버와 함께
JAR 파일로 묶어서 배포하는 경우가 많지만 이 방법으로는 JSP가 동작하지 않는다. (옛날 방식으로 WAR 파일로 업로드만 동작)
최근에는 클라우드를 사용해서 앱을 배포하는 경우가 늘고 있으며 이 경우에는 JAR 파일을 이용하기 때문에
JSP를 사용할 수 없는 경우가 늘고 있다. '사용할 수 있지만 제약이 많다' 는 정도만 이해하자.

    프리마커(FreeMarker)

이것은 ${oo} 형식으로 값을 채워나가는 템플릿이다. 타임리프가 특수한 속성으로 값을 설정하는 것에 비해
FreeMarker 는 텍스트를 표시할 위치에 직접 ${}를 넣어야 표시할 수 있다. 또한, 제어를 위해서 HTML 태그와 같은
<#oo> 형식의 태그를 사용하므로 HTML 비주얼 편집기 등에선 HTML 구조에 영향을 끼칠 가능성이 있다.

    그루비(Groovy)

2장에서 간단히 다룬 그루비는 자바 가상 머신상에서 동작하는 스크립트 언어지만 웹 페이지의 템플릿으로 사용할 수도 있다.
다른 엔진들이 HTML을 기반으로 하는 것에 비해 그루비는 HTML과는 전혀 다른 코드 체계를 가지고 있기 때문에
'HTML 태그가 아니면 모른다' 는 독자에겐 적합하지 않다. '코드로 화면 전체를 작성하는 것이 편하다' 는 사람에게만 권한다.

    벨로시티(Velocity)

벨로시티는 Apache Software Foundation이 개발중인 템플릿 엔진이다. $나 # 같은 특수한 문자를 사용해서 변수 등을
HTML 코드 내에 직접 작성할 수 있다. 프리마커와 비슷하지만, 프리마커가 태그 형태로 구문을 작성하는 것에 비해
벨로시티는 태그 없이 바로 작성할 수 있어서 비주얼 편집기 등에선 영향이 적다.

    머스타시(Mustache)

머스타시는 다양한 언어를 적용할 수 있는 템플릿 엔진이다. 자바 뿐만 아니라 PHP, 루비, 파이썬, 자바스크립트 등에서
사용할 수 있어서 자바 이외의 언어를 사용하고 싶은 사람에게 좋은 대안이 될 수 있다.
{{}} 기호를 사용해서 변수 등을 HTML 코드 내에 기술한다.

    타임리프 강추!

각각 장단점이 있으므로 자신의 개발 스타일에 맞는 것을 찾는 것이 좋지만, 이 책에선 타임리프로 사용한다.
몇 가지 이유가 있지만 '스프링 부트 에선 타임리프를 선택하는 사람이 가장 많기 때문' 이다.
또한, 기본이 되는 HTML 위에 필요한 속성을 추가만 하면 되기에 매우 간단하고 이해하기 쉬운 구성으로 돼 있다.
따라서 템플릿 관련 새로운 기술을 배우지 않고서도 바로 사용할 수 있어서 학습의 부담감을 지운다.

        기본은 변수식과 OGNL

타임리프의 기본은 '값을 출력하는 것' 이다. 이것은 ${{ oo }} 형식으로 작성하며 이 ${{}} 형식을 '변수식' 이라고 부른다.
변수식 안에 작성하는 것은 'OGNL 식' 이다. OGNL은 자바의 값에 접근하기 위한 식 언어다.
타임리프 뿐만 아니라 다양한 라이브러리와 프레임워크 등에서 사용되고 있다.
OGNL은 자바의 간이 버전 같은 방식으로 작성하기 때문에 자바 프로그래머라면 쉽게 익힐 수 있다.
기본적으로 '자바로 작성할 수 있는 식(간단한)이라면 OGNL 식으로도 작성할 수 있다' 고 생각하면 된다.
이미 기본적인 OGNL을 사용하고 있지만 좀 다른 형태의 예제를 통해 살펴보자. 앞 장까지 사용한 HeloController.java 클래스를
사용한다. 템플릿의 index.html을 수정해보자.

    index.html

여기선 th:text에 ${new java.util.Date().toString()} 이라는 값을 지정하고 있다. 변수에는 단순한 변수나 값만 작성하는
것이 아니라 이렇게 인스턴스 new 하거나 메소드를 호출하는 OGNL 식을 사용할 수 있다.

        유틸리티 객체

변수식은 이름 그대로 변수를 기술해서 그대로 출력할 수 있다. 이 변수는 이미 예제에서 확인했듯이,
컨트롤러에서 값을 준비하고 그것을 템플릿 측에 전달해서 출력하는 것이 기본적인 흐름이다.
하지만 자바 클래스 중에는 이런 템플릿에서 사용 빈도가 높은 것이 있다.
이런 클래스를 사용할 때도 항상 '컨트롤러에서 클래스를 변수로 준비 ...' 하는 것은 번거로운 일이다.
그래서 타임리프에선 자주 사용하는 클래스를 '#이름' 이라는 상수로 정의해서 변수식 안에 직접 작성할 수 있게 하고 있다.
이것을 '유틸리티 객체' 라고 한다. 유틸리티 객체에는 다음과 같은 것이 있다.

    #string     String 클래스 상수
    #numbers    Number 클래스 상수
    #bools      Boolean 클래스 상수
    #dates      Date 클래스 상수
    #objects    Object 클래스 상수
    #arrays     Array 클래스 상수
    #sets       Set 클래스 상수
    #maps       Map 클래스 상수

이것들은 클래스의 상수이므로 직접 클래스 메소드 등을 호출해서 사용할 수 있다.
단, new #dates 처럼 해서 Date 인스턴스를 만들 수는 없다. #dates.oo 와 같이 클래스 필드나 메소드 호출 등에 사용한다고
생각하면 된다.

    유틸리티 객체 사용

그러면 유틸리티 객체를 사용한 예를 보자. 이것도 컨트롤러 측은 수정이 필요 없고 템플릿(index.html)만 수정하면 된다.

    index1.html

여기선 날짜, 정수, 텍스트 등의 값을 정해진 형태로 표시하고 있다. 그러면 코드를 순서대로 보자.

    날짜 형식


    ${#dates.format(new java.util.Date(), 'dd/MMM/yyyy HH:mm')}


#dates 는 Date 클래스의 상수다. format 메소드를 사용해서 Date를 정해진 형식으로 표시하고 있다.
dd/MMM/yyyy HH:mm 형식으로 형식으로 패턴을 적용하고 있다.

    정수 형식


    ${#numbers.formatInteger(1234, 7)}


#numbers 는 Number 클래스의 상수다. formatInteger 메소드는 정수를 정해진 자릿수로 표시한다.
첫 번째 인수에는 대상 정수를 지정하고 두 번째 인수에는 자릿수를 지정한다.

    텍스트


    ${#strings.toUpperCase('Welcome to Spring.')}


#string는 String 클래스의 상수다. toUpperCase 는 인수로 지정한 텍스트를 모두 대문자로 반환하는 메소드다.
유틸리티 객체는 이와 같이 값의 형식을 지정하는 경우 간단한 처리를 변수식 내에 작성하고 싶을 때 도움이 된다.

        매개변수에 접근

웹 애플리케이션에선 쿼리 스트링에 매개변수를 붙여서 전송하는 경우가 자주 있다.
예를 들면 '/index?id=123' 과 같은 형태로 접속해서 123이라는 값을 처리에 이용하는 것이다.
컨트롤러에서 이런 매개변수를 처리하는 방법은 이미 설명했다. 하지만 컨트롤러를 통하지 않고 템플릿 내에서 직접 매개변수를
사용해야 하는 경우도 있다. 이때 사용하는 것이 param 이라는 변수다. 이것은 변수식 안에서 직접 사용할 수 있는 변수다.
이 변수 안에 있는 매개변수명을 지정해 값을 추출할 수 있다. 예를 들어 ${param.id} 라고 하면 id=oo 의 형태로 전송된
값을 받을 수 있다. 단, 보통은 이런 값들이 배열 형태로 되어 있으므로 배열 내에서 값을 추출하는 경우가 많다.
실제로 수정해보자.

    index2.html

그리고 id와 name을 쿼리 스트링으로 지정해서 접속해보자. 예를 들면 다음과 같은 형태다.

    localhost8080/home/?id=ok&name=gilbut

이렇게 하면 화면에 'from parameter ... id = ok, name = gilbut' 형태로 텍스트가 표시된다.
컨트롤러를 거치지 않고 템플릿 내에서 직접 전달된 값을 사용할 수 있다.

    텍스트 리터럴

여기서 사용하고 있는 th:text 의 값을 보면 큰따옴표 안에 다시 작은 따옴표를 사용해서 값을 작성하고 있다.
이것은 OGNL 로 텍스트 리터럴을 작성할 때 사용하는 방식이다.
하나의 텍스트 리터럴을 그대로 표시하는 경우는 큰따옴표 내에 직접 텍스트를 작성하면 되지만 다수의 리터럴을 연결할 때는
큰따옴표 내에 다시 작은따옴표로 리터럴을 사용해야 한다.


    예

    th:text="one two three"
    th:text="'one ' + 'two ' + 'three'"


이 예제에선 양쪽 코드가 모두 'one two three' 라는 텍스트가 출력하지만 후자는 각 단어를 기호로 연결하고 있다.
이런식으로 큰따옴표 안에서도 다시 식을 사용해서 값을 구성할 수가 있다.

        메시지식

${} 라는 변수식 외에도 타임리프에서 사용할 수 있는 것이 있다. 바로 '메시지식' 이다.
이것은 프로젝트에 미리 준비해둔 프로퍼티 파일(설정 파일)에서 값을 가져와서 표시하는 것이다.
자바에선 프로퍼티 파일에 미리 텍스트(설정값 등)를 저장해두고 필요에 따라 파일 내의 텍스트 값을 꺼내어 사용하는 경우가
자주 있다. 메시지식은 이것을 템플릿 내에서 직접 사용할 수 있게 한 것이다.
메시지식은 다음과 같이 작성한다.


    #{값 지정}


${ } 가 아닌 #{ } 로 작성하는 것이 특징이다. { } 안에는 추출할 값을 지정한다. 이것은 프로퍼티 파일에 작성한 값과
연결한다.

    프로퍼티 파일 작성

실제로 작성해보자. 이 파일은 일반 텍스트 파일로 작성하면 된다.
main 폴더의 resources 폴더 안에 messages.properties 라는 이름으로 텍스트 파일을 생성한다.

    messages.properties

두 설정값을 준비해 두었다. 이 값들을 템플릿에 표시해보기 위해 index 를 수정해보자.

    index3.html

수정 후 접속해보면 message.properties 에 작성한 값이 타이틀과 메시지로 페이지에 표시되는 것을 볼 수 있다.
보면 알겠지만 #{content.title}과 같이 프로퍼티의 항목명만 지정해주면 해당 값이 표시되는 것이다.

        링크식과 href

웹 페이지에선 URL을 지정하는 링크도 다양한 곳에 사용되며 이 링크를 지정하기 위한 전용 식도 존재한다.


    @{주소}


이것은 기본적으로 URL을 지정하는 속성(<a> 태그의 href 등)에서 사용한다. 예를 들어 @{/index} 라고 작성하면
/index 로 가는 링크를 지정할 수 있다.
'링크는 그냥 텍스트로 작성하면 안되나?' 하는 독자도 있을 것인데, 다른 변수 등을 조합해서 링크 주소를 만들어야 하는
경우는 이 기능을 사용하는 것이 편리하다.
간단한 예를 보자.

    index4.html

접속할 때 스트링에 id를 지정하고 localhost:8080/?id=123 에 접속하면 링크에는 /home/123 이 설정 된다.
여기서 <a> 태그를 보면,


    th:href="@{'/home/' + ${param.id[0]}}"


이와 같이 th:href 를 사용해서 값을 지정하고 있다. 잘보면 @{} 안에 ${}가 포함된 것을 알 수 있다.
텍스트를 연결해서 값을 구성하는 경우 이와 같이 내부에 변수식을 사용할 수도 있다.

        선택 객체의 변수식

변수식은 기본적으로 컨트롤러 측이 준비한 값을 그대로 출력하는 것이 전부다. 하지만 숫자나 텍스트를 값으로 사용할 때는
문제가 없지만 객체를 사용하려고 하면 문제가 발생한다.
물론 #{object.name} 처럼 객체의 프로퍼티나 메소드를 지정해서 작성하면 되지만 객체 안에 다수의 값이 존재하는 경우 일일이
작성하는 것은 매우 귀찮은 일이다. 그뿐만 아니라 객체 이름이 변경되면 이미 정의한 이름들도 모두 변경해야 하므로 감당하기
힘든 작업이 된다. 이런 경우 객체를 지정해서 해당 객체 안에 있는 값을 추출할 수 있는 전용 변수식을 사용하면 된다.
바로 *{ } 형태의 식이다. 이 변수식은 객체를 처리하는 변수식 내부에서 사용한다. 예를 들면 다음과 같다.


    <oo th:object="${객체">
        <xx th:text="*{프로퍼티}">
    </oo>


태그에 'th:object' 라는 속성을 사용해서 객체를 설정한다. 이렇게 하면 해당 태그 내부에서 *{ } 를 이용한 변수식을
사용할 수 있게 된다. 이 별표(*) 형태의 변수식에선 객체 내의 프로퍼티 등을 이름만으로도 지정할 수 있다.

    컨트롤러 수정

그러면 실제로 사용해보자. 이것은 컨트롤러 측에서 객체를 준비해야 하므로 HeloController 클래스를 먼저 수정한다.
여기선 3장에서 작성한 'DataObject' 클래스를 그대로 사용해서 객체를 만들어 본다.

    HeloController.java

여기선 mav.addObject("object", obj); 라는 형태로 new DateObject 한 인스턴스를 "object" 라는
ModelAndView에 보관하고 있다. 이것을 템플릿 측에서 사용하면 되는 것이다.

    템플릿 수정

템플릿 측을 수정해보자.

    index5.html

컨트롤러 측에서 object를 저장해둔 DateObject 값이 표 형태로 출력된다.
<table> 태그에 th:object를 사용해서 ${object} 를 설정하고 있다. 이것으로 <table> 태그 내에선 *{} 로 object의
프로퍼티 등을 직접 참조할 수 있게 된다. 나머지는 th:text="*{id}" 형태로 값을 지정해서 출력만 하면 된다.
보면 알겠지만 객체 관련 코드는 th:object 가 전부다. 이것은, 새로운 DataObject 를 만들어서 기존 DataObject 와 교체하는
경우에도 이 부분만 변경하면 된다는 의미가 된다.

        리터럴 치환

변수식 내에서 몇 개의 값을 조합해서 출력하는 경우 "'A' + 'B'" 와 같이 큰따옴표 내에서 다시 텍스트 리터럴을 연결했다.
이것으로 원하는 텍스트를 만들 수 있었지만 더 간단한 작성 방법이 있다면 편리할 것이다.
이럴 때 사용할 수 있는 것이 '리터럴 치환' 이라는 작성법이다. 다음과 같이 작성한다.


    "| 텍스트 내용 |"


텍스트 앞뒤에 '|' 기호를 붙여서 작성하는 방식이다.  이것이 일반 텍스트와 다른 점이 안에 변수식을 직접 기술할 수 있다는
점이다. 실제로 사용해보자. 앞의 HeloController 를 수정해보자. Object에 전달되는 값을 연결해서 텍스트를 표시하자.

    index6.html

<p> 태그를 보면,


    th:text="|my name is *{name}. mail address is *{value}. |"


이와 같이 작성돼 있다. 텍스트 리터럴 안에 *{name}과 *{value}라는 변수식을 직접 사용하고 있다.
이런 식으로 + 기호로 리터럴을 연결할 필요 없이 텍스트 형태에 가까운 변수식을 대입해서 사용할 수 있다.

        HTML 코드 출력

지금까지는 텍스트를 출력하는 것이 전부였다. 그럼 일반적인 텍스트가 아닌 HTML 코드를 출력하고 싶을 때는 어떻게 해야 할까?
예를 들어 컨트롤러에 다음과 같은 메소드를 준비했다고 하자.

    HeloController1.java

msg라는 이름으로 텍스트를 저장하고 있으며 이 텍스트에는 HTML 태그가 포함돼 있다.
이것을 그대로 템플릿에 출력하면 어떻게 해야 할까?

    index7.html

접속해보면 HTML 태그도 함께 텍스트로 출력되는 것을 알 수 있다.
이것은 타임리프가 HTML 태그를 이스케이프 처리하고 있기 때문이다. 타임리프는 변수식으로 텍스트를 출력할 때 안전을 위해
HTML 태그를 모두 이스케이프 처리하게돼 있다.

    th:utext 사용

이 문제를 해결하려면 'th:text' 부분을 'th:utext' 라고 변경하면 된다.
th:utext는 이스케이프를 하지 않고 텍스트를 출력하기 위한 속성이다. 이것을 사용하면 텍스트를 그 상태로 그대로 출력할 수
있다. 다음과 같이 수정한 후 접속해보자. 이번에는 텍스트 안의 HTML 태그가 제대로 인식돼서 표시된다.

    index8.html

th:utext는 HTML 태그를 출력할 때 큰 도움이 된다. 하지만 값 자체에 HTML 태그가 포함돼 있으면 해당 태그가 그대로 작동되기
때문에 출력하는 값에 의해 문제가 발생할 수 있다.
특히 사용자가 전송한 정보를 바탕으로 텍스트를 생성하는 경우 XSS(Cross Site Scripting) 등의 공격에
무방비로 노출될 수 있다. 따라서 이런 위험성을 인지한 후에 th:utext 기능을 사용하는 것이 좋다.
(XSS란 사용자 입력이 가능한 웹 페이지의 요소에 HTML 태그나 스크립트를 심어 비정상적으로 페이지가 동작하는 해킹 기법)