        JSP 는 필요한가?

지금까지는 타임리프를 템플릿으로 사용하는 방법을 설명했지만, JSP 를 왜 사용하지 않을까 하는 의문이 들 수 있다.
스프링 부트에선 JSP 사용을 권장하지 않는다. 'JAR 형식으로는 동작하지 않고 WAR 파일로 배포해야 하는 등' 의
몇 가지 제약이 있어서기도 하지만, 가장 큰 이유는 '이미 JSP 자체가 서버 측 언어로 그 사용 빈도가 줄고 있기 때문' 이다.

JSP 는 삽입 태그를 사용해서 작성한다. 특히 '스크립틀릿' 라는 기능이 있어서 자바 코드를 직접 태그 안에 작성할 수 있다.
이를 통해 HTML 내에 원하는 처리를 삽입해서 실행할 수가 있다.
하지만 이런 이점이 JSP 의 결점이 되기도 한다. 뷰 부분에 코드가 섞여서 로직을 분리하기 어려워지기 때문이다.
또한, HTML 과 같은 태그를 사용하므로 HTML 편집기 등에서 JSP 삽입 부분을 분리하기 어려우며 비주얼 편집기 등에도
사용이 어렵다.

타임리프의 사용법을 전체적으로 설명했는데, 이런 JSP 의 단점 측면에서 다시 보면 타임리프가 얼마나 '코드를 분리하기 쉽게'
설계돼 있는지 알 수 있다. 타임리프 자체의 기능은 특수한 속성으로 태그 안에 기술된다.
분기나 반복 등도 모두 같은 방법으로 구현해서 코드로서 작성할 필요가 없다.

JSP 를 사용해서 웹 애플리케이션을 만들어보면 알겠지만, 사용법이 쉬워 '모든 것을 JSP 로 만드는 경우' 가 생기고 만다.
그 결과 HTML 안에 수많은 자바 코드가 혼재하게 된다. 이런 방법은 서버 측 개발에 대해 잘 모르는 경우는 '간단해서 편하다'
고 할 수 있지만, 어느 정도 규모가 있는 개발을 하게 되면 'JSP 에 의존하는 개발은 피해야 한다' 라는 것을 알게 된다.
즉, JSP 는 이미 시대의 기술에 뒤처지고 있으며, 일부러 JSP 를 사용해서 템플릿을 만들 필요성도 없어지고 있다.

        JSP 를 그래도 사용한다면?

하지만 아직 많은 곳에서도 JSP 를 사용하고 있고 JSP 를 사용하고 싶은 사람도 있을 것이다.
스프링 부트에선 권장하지 않는 것이지 사용할 수 있으니 사용해보자.
먼저 템플릿 엔진을 추가해야 하므로 pom.xml 을 열어서 관련 디펜던시를 추가하자.


    <dependency>
        <groupId>org.apache.tomcat.embed</groupId>
        <artifactId>tomcat-embed-jasper</artifactId>
    </dependency>


    폴더 준비

JSP 를 배치하기 위한 폴더를 준비하자. 서버 측 자바 개발의 일반적인 폴더 구성을 생각하면 된다.
웹 애플리케이션 폴더(보통은 webapp 폴더) 안에 'WEB-INF' 라는 외부에서 접근할 수 없는 비공개 폴더를 준비한다.
폴더를 순서대로 'main - webapp - WEB-INF - jsp' 순으로 폴더가 나오면 된다.

    application.properties 추가

마지막으로 application.properties 에 필요한 정보를 추가하자. resources 폴더를 열면 'application.properties' 파일이 있다.
열어서 다음과 같이 작성하자.

    application.properties

이것은 템플릿 파일을 검색할 때 사용하는 정보다. spring.mav.view.prefix: 는 템플릿 앞에 붙일 경로를 지정하는 것이고
spring.mvc.view.suffix: 는 뒤에 붙일 확장자를 지정하는 것이다. 이것으로 WEB-INF 안의 jsp 폴더에 있는 JSP 파일이
템플릿으로 인식되게 된다.

    JSP 파일 작성

템플릿이 될 JSP 파일을 만들어보자.
'index.jsp' 라는 이름으로 파일을 만든다.

    index01.jsp

다음은 컨트롤러를 준비해야 한다. 템플릿 표시를 확인하기 위해 HeloController 클래스를 수정한다.

    HeloController90.java

    폼 사용

컨트롤러와 템플릿 간 값 교환 방법을 살펴보자. 여기서는 '폼을 전송하고 그 결과를 템플릿에 표시' 하는 예제를 작성한다.
먼저 템플릿 수장이다. index.jsp 의 <body> 안을 수정한다.

    index02.jsp

보면 알 수 있듯 EL 식을 이용해서 ${val} 값을 출력하고 있다.
컨트롤러를 수정해보자.

    HeloController91.java

index 외에 send 라는 메소드도 사용하고 있다. index가 GET 접속 시의 처리이고 send 가 POST 시의 처리다.
양쪽 모두 addObject 로 val 이라는 값을 저장하고 있다는 것을 알 수 있다. 이 val 이 템플릿의 ${val} 에 출력되는 것이다.

        그루비 템플릿 사용하기

스프링 부트에선 그루비를 사용할 수 있다는 것이 큰 특징 중 하나다. 그루비는 자바 프로그래머라면 비교적 쉽게 접근할 수
있는 스크립트 언어로 이미 다양한 분야에서 사용되고 있다.
그루비는 템플릿 엔진으로도 사용할 수 있다. 2장에선 그루비 기반의 간단한 앱을 작성했었다. 물론 자바로 개발하는 경우에도
그루비를 사용할 수 있다.

    JSP 수정 내용 확인

앞에서 한 JSP 관련 설정 내용을 삭제해서 원래 상태로 복원한다.
pom.xml 파일에서 디펜던시를 삭제하고 application.properties 에서 설정한 것들을 삭제 후 webapp 폴더를 삭제한다.

    pom.xml 수정

다시 그루비를 사용하기 위해 디펜던시를 추가한다.


    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-groovy-templates</artifactId>
    </dependency>


        그루비 템플릿 파일 생성

그루비 템플릿을 사용해보자.
resources 안에 있는 templates 폴더에 index.tpl 이라는 이름으로 텍스트 파일을 만든다.

    index01.tpl

    index.tpl 작성

생성한 index.tpl 을 열어서 코드를 작성한다. 먼저 아주 기본적인 페이지 표시부터 시작한다.

    index01.tpl

간단한 페이지다. 이제 컨트롤러를 수정해보자.

    HeloController92.java

    폼 사용

이제 기본적인 사용법을 알았으니 템플릿과 컨트롤러를 수정해보자.

    index02.tpl

<p> 태그 부분을 보면 p(msg) 라고 작성된 것을 알 수 있다. 이것은 <p> 텍스트에 변수 msg를 설정하고 있다.
컨트롤러에서 이 msg 를 설정하면 여기에 적용되는 것이다. 이제 컨트롤러를 수정해보자.

    HeloController93.java

폼이 전송한 값을 추출해서 1부터 해당 값까지 합계를 구하고 있다. 합계를 구하고 msg 에 결과 메시지를 설정하고
템플릿 p(msg) 에 표시되게 한다.
그루비를 이용하면 이와 같이 컨트롤러에서 추가한 변수를 그대로 템플릿 내에서 사용할 수 있다.

        데이터를 테이블에 표시하기

그루비를 사용하는 템플릿은 아직 익숙하지 않기 때문에 많이 해봐야 한다.
'목록을 사용해서 데이터를 테이블에 표시' 하는 예제다. 먼저 컨트롤러를 수정해보자.

    HeloController94.java

    index03.tpl

data 에 저장된 DataObject 내용이 테이블로 표시된다.

    each 를 이용한 반복

여기선 data 에서 순서대로 DataObject 를 꺼내서 출력하는 것을 반복하고 있다. 이때 사용하는 것이 아래 코드다.


    oo.each{ 변수 ->
        ... 반복 내용 ...
    }


그루비에선 컬렉션의 each라는 메소드를 사용해서 내부에 있는 객체를 순서대로 추출할 수 있다.
추출한 값은 { 뒤에 있는 변수에 대입 된다. { } 안에선 이 변수를 사용해서 값을 꺼내 처리하면 된다.

이토록 각각의 템플릿은 장단점이 존재한다.