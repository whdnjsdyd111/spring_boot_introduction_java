템플릿 엔진의 기본은, 컨트롤러에서 준비한 값을 템플릿 안에 심어서 렌더링하는 것이다.
타임리프에는 복잡한 값을 더욱 정교하게 조정할 수 있는 다양한 기능들이 존재한다.
예를 들면 프로그래밍 언어의 구문에 해당하는 기능이나 HTML 및 자바스크립트를 동적으로 변경하는 기능, ONGL 식 전개해서
내장하는 기능 그리고 여러 템플릿을 조합해서 레이아웃을 만드는 기능 등이 있다.

        조건식에 대해

먼저 '조건식' 에 대한 것이다. 미리 준비한 참거짓 값의 결과에 따라 출력할 내용을 변경하는 처리다.
자바에서 말하는 '3항 연산자' 와 비슷하다. 다음과 같이 사용한다.


    '번수식 ? 값1 : 값2'


참거짓 값을 얻을 수 있는 변수식과 그 결과가 true인 경우의 값 및 false인 경우의 값으로 구성된다.
각각 '?' 와 ':' 로 구분하고 있어서 자바의 3항 연산자와 같은 형태라고 볼 수 있다.

    컨트롤러 수정

그러면 실제로 조건식을 사용해보자. 먼저 컨트롤러 측에 필요한 값을 준비하겠다.
HeloController 를 다음과 같이 수정하자. @PathVariable을 사용한다.

    HeloController2.java

여기선 /123과 같이 정수를 붙여서 접속하면 해당 정수를 id로 해서 인수에 전달하고 있다.
그리고 id 값, 확인하는 값, true일 때와 false일 때의 값을 각각 addObject하고 있다.
확인할 값은 mav.addObject("check", id % 2 == 0); 으로 id를 2로 나눈 나머지가 0인지를 판단해서 전달하고 있다.
이것이 true 이면 짝수, false 이면 홀수라고 판단하는 것이다.

    템플릿 수정

템플릿 측을 수정해보자. 컨트롤러에서 addObject 한 값과 id 값을 기준으로 다른 메시지가 출력되게 한다.

    index9.html

여기선 <p> 태그에 다음과 같이 설정돼 있다.


    th:text="${id} + ' is ' + 조건식"


이 조건식에선 check 값에 따라 trueVal 또는 falseVal 중 하나가 출력되게 하고 있다. 다음 코드가 이에 해당한다.


    ${check} ? ${trueVal} : ${falseVal}


값의 조건을 확인하고 있는 ${check} 에는 반드시 참거짓 값이 설정돼야 한다.
만약 다른 값이 들어가면 제대로 실행되지 않으니 주의하자.

        조건 분기의 th:if

조건식은 단순히 '참거짓 값을 사용해서 두 개의 값 중 하나를 표시' 하는 역할을 한다. 이외에도 표시 여부 자체를
ON/OFF 하는 것도 가능하다. 이때 사용하는 것이 다음과 같은 제어용 속성들이다.

    th:if="조건"

설정한 조건이 true 이면 이 태그 및 그 내부에 있는 태그를 표시한다.

    th:unless="조건"

설정한 조건이 false 이면 이 태그 및 그 내부에 있는 태그를 표시한다.

이 두거지 속성의 흥미로운 점은, true/false 판단 시에 참거짓 값뿐만 아니라 다른 종류의 값도 사용한다는 점이다.
예를 들면 다음과 같은 값들이 사용된다.


    true로 인식되는 것

    true
    0 이외의 숫자
    "0", "off", "no" 이외의 텍스트

    false로 인식되는 것

    false
    숫자 0
    "0", "off", "no" 와 같은 텍스트

이것을 응용해서 yes/no 나 on/off 같은 텍스트로 출력할 내용을 쉽게 변경할 수 있다.

    매개변수 확인하기

그러면 예제를 만들어보자.

    HeloController3.java

여기선 값을 확인하기 위해 변수 check 를 사용하고 있으며 mav.addObject("check", id >= 0); 과 같은 형태로 작성하고 있다.
id >= 0 으로 id 값이 0 이상인지 판단하는 것이다. 이외에도 id 값이나 trueVal, falseVal 등의 값을 설정하고 있다.

    th:if/th:unless 사용

다음은 템플릿 수정이다.

    index90.html


    check가 true인 경우

    <p th:if="${check}" th:text="{id} + ' is ' + ${trueVal}">

    check가 false인 경우

    <p th:unless="${check}" th:text="{id} + ' is ' + ${falseVal}">


check 값이 true이면 앞의 <p> 태그가 표시되고 false이면 뒤의 <p> 태그가 표시된다. 어처럼
th:if 와 th:unless 는 식의 결과에 따라 속성을 설정하고 있는 탭 자체의 표시 여부가 결정된다.

        조건 분기의 th:switch

th:if 는 참거짓 값을 사용한 조건 분기로 기본적인 '양자택일' 의 방식으로 결과를 출력한다. 그렇다면
세 개 이상의 분기를 만들고 싶은 경우는 어떻게 해야 할까?
이때 사용하는 것이 th:switch 다. 다음과 같은 형식으로 사용한다.


    <oo th:switch="조건식>
        <xx th:case="조건식>...</xx>
        <xx th:case="조건식>...</xx>
    </oo>


th:switch는 조건식의 값을 확인해서 그 내부에 있는 th:case 에 같은 값이 있는지 찾고, 같은 값을 발견한 경우 해당
th:case 의 태그만 출력하는 기능이다.

    월을 이용해서 계절 찾기

간단한 예제를 만들어보자. 쿼리 스트링에 숫자를 전달하고 이 숫자를 기준으로 표시할 내용을 변경하는 방식을 생각하면 된다.
월을 나타내는 정수를 전달하고 해당 월의 계절을 표시하는 프로그램을 만들어보자.
먼저 컨트롤러를 수정한다.

    HeloController4.java

쿼리 스트링으로 보낸 값을 12로 나눈 나머지를 계산하고 있다.


    int m Math.abs(month) % 12;


이것으로 보낸 값이 0 ~ 11 의 범위로 제한된다. 12는 0으로 되므로 이것만 12로 돌려 두게 한다.
(m = m == 0 ? 12 : m; 부분). 다음은 이것을 3으로 나눈 정숫값을 check에 저장한다.


    mav.addObject("check", Math.floor(m / 3));


이것으로 1 ~ 2 는 0, 3 ~ 5는 1, 6 ~ 8 은 2, 9 ~ 11은 3, 12는 4가 되며 계절별 숫자를 설정하게 된다.
이후에는 이 값을 check에 설정하기만 하면 된다.

    템플릿 수정

다음은 check 값에 따라 표시할 메시지가 바뀌게끔 템플릿을 수정해보자.

    index91.html

    th:switch 확인

여기선 다음과 같이 check 값에 따라 표시할 메시지를 설정하고 있다.


    <div th:switch="${check}">
        <p th:case="0" th:text="|${month} - Winter|"></p>
        ... 생략 ...


th:switch="${check}" 라고 설정하면, 해당 <div> 태그 내부에선 check 값과 동일한 값의 th:case 태그만 표시하게 된다.
<p> 태그를 보면 th:case="0" th:text="|${month} - Winter|" 와 같이 th:case의 값과 th:text를 이용한 메시지가 설정돼 있다.
예들 들어 th:case="0" 이면 ${check} 값이 0일 때의 태그가 표시되는 것이다.
또한, 코드를 자세히 보면 마지막 부분에 다음과 같은 코드가 있다.


    <p th:case="*">...?</p>


th:case="*" 는 와일드카드(*)를 사용한 것으로, 앞에 있는 th:case 값들과 일치하지 않는 모든 값을 캐치하는 것이다.
자바의 switch 문에 있는 default: 와 같다고 보면 된다.

        th:each

조건 분기가 있으면 당연히 반복하는 속성도 있다. 그것이 th:each 이다. 다음과 같은 형식으로 작성한다.


    <oo th:each="변수 : ${컬렉션}">
        ... ${변수}를 사용한 표시 ...
    </oo>


th:each 에선 배열이나 컬렉션 등을 값으로 설정한다. 단, 컬렉션만 작성하는 것이 아니라 예를 들면 "value:${list}" 처럼
새로운 변수명과 함께 기슬한다. 이를 통해 콜론(:) 뒤에 있는 리스트로부터 순서대로 값을 꺼내서 콜론 앞에 있는 변수에 대입
할 수 있다. 이 태그의 내부에선 컬렉션 값을 저장하고 있는 변수를 이용해서 출력할 내용을 제어한다.

    컨트롤러 수정

다음과 같이 작성해본다.

    HeloController5.java

여기선 ArrayList 인스턴스를 만들어서 String 배열 형태로 데이터를 저장하고 있다. 이것을 템플릿에 data로 전달한다.

    템플릿 수정

템플릿을 수정해보자.

    index92.html

접속해보자. 컨트롤러에서 준비한 data 내용이 테이블 형태로 출력된다.
테이블의 태그 부분만 보면 다음과 같이 돼 있다.


    <tr th:each="obj:${data}">
        <td th:text="${obj[0]}"></td>
        <td th:text="${obj[1]}"></td>
        <td th:text="${obj[2]}"></td>
    </tr>


<tr> 태그에 th:each="obj:${data}" 라는 형태로 th:each 를 설정하고 있다. 이를 통해 data에서 값을 꺼내서 obj에 대입하는
처리를 반복적으로 실행하게 된다. 이 내부에선 <td> 태그를 설정하고 거기에 th:text:${obj[0]}" 라고 기술해서 obj의 값을
꺼내 출력하고 있다. 이 th:each 를 실행하면 th:each 가 있는 <tr> 태그 자체가 반복해서 출력된다는 것을 알 수 있다.
이와 같이 '반복 출력하고 싶은 태그' 에 th:each를 설정하는 것이다.

        전처리에 대해

변수식에는 기본적으로 '값' 을 설정한다. 템플릿으로 처리가 옯겨간 후에는 이미 모든 값이 확정돼 있어야 한다.
하지만 변수식 안에 OGNL 식을 테스트로 작성해서 경우에 따라 값을 동적으로 변경할 수 있다면 더 유연한 처리를
구현할 수 있다. 예로 ${x} 라는 변수식이 있다고 하자. 이 x 엔 보통 땐 "a" 또는 123 같은 '값' 이 설정돼 있다.
이 x에 "num * 2 + 3" 같은 식을 테스트로 설정하고 이 식을 평가한 결과를 얻을 수 있다면 어떨까?
어떨 때는 "num * 2 + 3" 이지만 경우에 따라선 "num / 2 - 3" 이 될 수도 있다. 필요에 따라 텍스트식을 작성하고 그것을
평가한 값을 변수식에 사용할 수 있다면 재밌는 처리를 구현할 수 있을 것이다.
사실은 타임리프에서 이런 처리를 구현할 수 있다. 다음과 같이 작성하면 된다.


    __${텍스트}__


값의 앞뒤에 밑줄(_)을 두 개씩 붙여서 작성하면 그 사이에 있는 텍스트가 식으로 인식돼서 먼저 처리된다.
그리고 그 결과가 이 부분에 추가돼서 실행되는 것이다.
이런 기능을 '전처리(프로세싱)'  라고 한다. 이를 통해 '식의 일부를 미리 평가해서 해당 결과를 바탕으로
원래 변수식을 실행' 할 수 있게 된다.

    값에 따라 식 변경하기

전처리 예를 살펴보자. 지금까지 예제를 응용해서 쿼리 스트링에 숫자를 붙여 접속하면 해당 번호의 데이터를 표시하는
프로그램을 만들어보자. 단, 주소에 사용한 값에 따라 평가할 식이 동적으로 변경돼야 한다.
먼저 컨트롤러를 수정해보자.

    HeloController6.java

여기선 인수로 전달되는 값이 양수인지 음수인지에 따라 check 에 설정하는 텍스트를 변경하고 있다.


    양수

    "num >= data.size() ? 0 : num"

    음수

    "num <= data.size() * -1 ? 0 : num * -1"


양수인 경우 data의 데이터 수보다 큰 값이면 0으로 설정하고 있다. 음수인 경우는 데이터 수 x * -1 이하면 0으로 설정하고
그렇지 않으면 -1을 곱하고 있다.

    템플릿 수정

    index93.html

완성했다면 접속해보자. 양수 /1 를 붙이면 인덱스 번호 1 데이터가 표시되고 /-1 와 같은 음수를 지정해도 인덱스 번호
1이 표시된다. <p> 태그를 보면


    <p th:text="|expression[ ${check} ]|">


이와 같이 ${check} 로 check 값을 그대로 출력하고 있다. 그리고 <table> 태그를 보면


    <table th:object="${data.get(__${check}__)}">


${data.get(__${check}__)} 라는 값이 설정돼 있다. 이를 통해 ${check} 의 텍스트가 평가되고 해당 결과값이
data.get의 인수로 설정된다. 즉, 식이 아닌 식의 결과가 get에 설정되는 것이다.

        인라인 처리에 대해

타임리프는 값을 모두 th:text 라는 속성 형태로 설정한다. 이것은 타임리프가 동작하지 않아도 페이지 표시에 영향을 주지 않고
HTML 비주얼 편집기 등에서 레이아웃을 조절하며 코딩할 수 있다는 장점이 있다.
하지만 텍스트 편집기 등으로 일일이 코드를 작성하는 경우는 이 th:text를 사용하는 방법이 귀찮을 수 있다.
직접 HTML 태그 안에 값을 기술할 수 있다면 직관적인 코딩이 가능할 것이다.
이럴 때 사용할 수 있는 것이 '인라인 처리' 라는 기능이다. 인라인 처리는 HTML 태그와 태그 사이에 직접 타임리프의
변수식을 작성하는 방법으로 다음과 같은 형태로 사용한다.


    <oo th:inline="text">
        <xx>[[${변수식}]]</xx>
        ... 직접 식을 작성 ...
    </oo>


인라인 처리는 아무 곳에서나 사용할 수 있는 것은 아니다. 태그에 th:inline="text" 라고 작성하면 해당 태그 내부에서만
인라인 처리가 가능해진다. 인라인 처리를 하고 싶을 때는 변수식의 앞뒤에 [[ 와 ]] 를 붙여서 작성한다.
[[${num}]] 와 같은 형식으로 ${num}의 값이 직접 해당 위치에 출력된다.

    예제 작성

    HeloController7.java

    index94.html

접속하면 data에 저장된 DataObject 값이 테이블 형태로 출력된다. 테이블 부분을 보면,


    <td>[[${obj.id}]]</td>
    <td>[[${obj.name}]]</td>
    <td>[[${obj.value}]]</td>


이와 같이 직접 변수식을 추가하고 있는 것을 알 수 있다. <table th:inline="text"> 에 의해, <table> 내에서 인라인 처리가
이루어지기 때문이다. 이 th:inline 을 제거하면 값이 출력되지 않고 [[${obj.id}]] 라는 텍스트가 그대로 표시된다.

        자바스크립트의 인라인 처리

이 인라인 처리는 텍스트 뿐만 아니라 자바스크립트에도 적용할 수 있다. 스크립트의 경우 <script> 태그에 다음과 같은
형식으로 th:inline 을 설정하면 된다.


    <script th:inline="javascript">


이것으로 <script> 태그 내에 인라인 처리가 적용된다. "text" 가 아닌 "javascript" 를 사용하고 있는 것에 주의하자.
변수식도 단순히 [[]] 형태가 아닌 주석 형태로 작성한다. 다음과 같은 형식이다.


    /*[[${변수식}]]*/


이것으로 스크립트 내에서 변수식을 사용할 수 있게 된다. 그러면 실제로 사용해보자.
먼저 컨트롤러 수정이다.

    HeloController8.java

주소 뒤에 세금의 세율을 나타내는 숫자(정수)를 붙여서 접속해보자.
그럼 지정한 세율로 세금을 계산해서 세금 포함 가격을 표시한다.
<script th:inline="javascript">를 지정한 스크립트에는 action 함수가 적용된다. 이것은 <button onclick="action()">과
같이 버튼을 클릭해서 호출할 수 있다. 계산을 위해선 다음과 같이 식을 사용하고 있다.


    var res = parseInt(val * ((100 + /*[[${tax}]]*/) / 100));


이중에서 /*[[${tax}]]*/ 부분에 tax의 값이 들어간다. 예를 들어 '/10' 이라고 지정해서 접속하면,


    var res = parseInt(val * ((100 + 10) / 100));


이와 같은 코드가 된다.  이와 같이 템플릿에 준비한 스크립트의 특정 부분을 컨트롤러 측에서 설정할 수 있게 되면
자바스크립트 자체도 자바로 프로그래밍할 수 있게 된다.

        템플릿 프래그먼트

웹 페이지는 항상 하나의 파일만 사용해서 작성해야 하는 것은 아니다. 예를 들면 헤더나 푸터, 메뉴 같은 것들을
별도의 파일로 작성하고 이것들을 조합해서 페이지 전체의 레이아웃을 만들 수도 있다.
이처럼 '여러 파일을 조합해서 페이지를 구성할 때' 사용하는 것이 '템플릿 프래그먼트' 라 불리는 구조다.
이것은 특정 파일 안에 '프래그먼트'(해당 부분만 별도로 추출해서 사용할 수 있게 한 부품) 로 작성된 부분을 다른
템플릿에 삽입할 수 있는 기술이다.
이를 위해선 부품이 되는 파일과 그것을 조합하는 파일을 준비해야 한다. 간단히 정리하면 다음과 같다.

    부품이 되는 템플릿


    <oo th:fragment="프래그먼트명">


부품을 준비하는 템플릿에는 th:fragment 라는 속성을 사용해서 태그를 작성한다. 값으로는 이 프래그먼트에 사용할 이름을
지정한다. 이를 통해 해당 태그 부분을 프래그먼트로서 다른 곳에서도 사용할 수 있게 된다.

    조합하는 측


    <oo th:include="템플릿명::프래그먼트명">


th:include 를 지정하고 거기에 부품이 될 템플릿의 이름과 프래그먼트명을 작성한다.
이것으로 지정한 프래그먼트가 해당 태그에 복사된다.

    템플릿 작성

실제로 작성해보자. 헤더 부분으로 사용할 part.html 을 작성한다.

    part.html

위 코드에선 두 곳에 프래그먼트를 설정하고 있다. 첫번째는 <head> 안에 있는 <style> 태그 부분이며,
두 번째는 <body>에 있는 <div> 태그다.


    <style th:fragment="frag_style">
    <div th:fragment="frag_body">


이것으로 "frag_style" 과 "frag_body" 라는 두 개의 프래그먼트가 설정됐다. 이와 같이 프래그먼트는 하나의 파일 안에
여러 개를 지정할 수 있다.

    프래그먼트 조합

그러면 프래그먼트를 조합해서 표시해보자. index 내용을 다음과 같이 수정한다.

    index96.html

컨트롤러의 index 메소드의 값을 교환할 필요가 있는데 다음과 같이 단순한 형태로 수정한다.

    HeloController9.java

페이지에 접속하면 part.html 일부가 삽입된 형태로 표시된다.
여기선 <head>의 <style> 태그와 <body> 안의 <div> 태그에 각각 다음과 같이 프래그먼트가 십입돼 있다.


    <style th:include="part :: frag_style"></style>
    <div th:include="part :: frag_body">


파일 지정은 'part.html' 이 아닌 'part' 라고만 하면 된다. 이것으로 part.html 에 작성한 콘텐츠와 해당 콘텐츠가 사용하는
스타일시트를 포함해서 표시할 수 있게 된다.
프래그먼트가 재밌는 부분은 '부품을 일반적인 템플릿 파일로써 사용할 수 있다' 는 점이다. 즉, 프래그먼트용으로
특별한 것을 준비하는 것이 아닌 일반적인 템플릿으로 사용할 수 있는 것에 프래그먼트를 지정하면 된다.
따라서 일반적으로 표시하는 콘텐츠 일부에 th:fragment 를 지정해두고 필요에 따라 이것들을 하나의 페이지로 모아서
표시하는 것도 가능하다.